from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound
import re
import streamlit as st
from urllib.parse import urlparse, parse_qs

def extract_video_id(url: str) -> str | None:
    """
    Extract YouTube video ID from a URL.
    Supports URLs like:
    - https://www.youtube.com/watch?v=HISRUrJsD08&t=10s
    - https://youtu.be/HISRUrJsD08
    - https://youtube.com/shorts/HISRUrJsD08
    Returns the video ID string or None if not found.
    """

    # Parse URL components
    parsed_url = urlparse(url)

    # Check hostname variants
    if parsed_url.hostname in ("www.youtube.com", "youtube.com", "m.youtube.com"):
        # If path is /watch, video id is in 'v' query parameter
        if parsed_url.path == "/watch":
            query_params = parse_qs(parsed_url.query)
            if "v" in query_params:
                return query_params["v"][0]
        # If path starts with /shorts/, extract after /shorts/
        elif parsed_url.path.startswith("/shorts/"):
            return parsed_url.path.split("/")[2]
        # If path starts with /embed/, extract after /embed/
        elif parsed_url.path.startswith("/embed/"):
            return parsed_url.path.split("/")[2]

    elif parsed_url.hostname == "youtu.be":
        # For shortened youtu.be URLs, video ID is path without leading slash
        return parsed_url.path.lstrip("/")

    # Fallback: try regex matching video ID in URL
    # Video IDs are 11 characters, alphanumeric, hyphen and underscore
    regex = r"(?:v=|\/)([0-9A-Za-z_-]{11}).*"
    match = re.search(regex, url)
    if match:
        return match.group(1)

    return None


def fetch_transcript_from_video(
    video_input: str, languages=["en"]
) -> list[dict]:
    """
    Returns a list of transcript segments with timestamps.
    Tries official transcripts first; if missing tries auto-generated.
    """
    video_id = extract_video_id(video_input)
    try:
        # Try official transcripts first
        transcript_list = YouTubeTranscriptApi.get_transcript(video_id, languages=languages)
        return transcript_list
    except NoTranscriptFound:
        try:
            # Try auto-generated transcripts fallback
            transcript_list = YouTubeTranscriptApi.get_transcript(
                video_id, languages=languages, 
                # `YouTubeTranscriptApi.get_transcript` by default fetches auto-generated if official not found,
                # but just in case, try to explicitly fetch autogenerated transcripts
            )
            st.info("ℹ️ Using auto-generated captions.")
            return transcript_list
        except Exception as e:
            st.warning(f"⚠️ Transcript disabled or not found: {e}")
            return []
    except TranscriptsDisabled:
        st.warning("⚠️ Transcripts are disabled for this video.")
        return []
    except Exception as e:
        st.warning(f"⚠️ Unexpected error fetching transcript: {e}")
        return []

def transcript_to_text(transcript_list: list[dict]) -> str:
    """
    Convert transcript list of segments into single plain text.
    """
    return " ".join(segment.get("text", "") for segment in transcript_list)
